package com.bytetrend.sandbox.scala.hackerrank

import java.io.PrintWriter

object SteadyGene2 {

  // Complete the steadyGene function below.
  def steadyGene(gene: String): Int = {

    import scala.collection.mutable.{Map => MMap}
    import scala.math.max


    def hasMore(charToDelta: MMap[Char, Int]): Boolean = {
      charToDelta('A') > 0 || charToDelta('T') > 0 || charToDelta('G') > 0 || charToDelta('C') > 0

    }

    def calculateReplacement(str: String): MMap[Char, Int] = {
      val maxPerLtrCnt = str.length / 4
      val map: MMap[Char, Int] = MMap('C' -> 0, 'G' -> 0, 'A' -> 0, 'T' -> 0)
      for (c <- str) {
        map(c) = map(c) + 1
      }
      for ((ltr, ltrCnt) <- map) yield (ltr -> max(0, ltrCnt - maxPerLtrCnt))
    }

    val remAdd: MMap[Char, Int] = calculateReplacement(gene)
    var shortest = gene.length
    var i = 0
    var j = i
    val minReplChar = remAdd.foldLeft(0)((x, y) => x + y._2)
    //    println(remAdd.toSeq.mkString(","))
    while (shortest > minReplChar && i < gene.length - minReplChar) {
      j = i
      val tempMap = MMap() ++ remAdd
      var addStr = 0
      while (addStr < shortest && hasMore(tempMap) && j < gene.length) {
        val c = gene(j)
        val delta = tempMap(c)
        if (delta > 0) {
          tempMap(c) = delta - 1
          addStr = addStr + 1
        } else if (addStr > 0)
          addStr = addStr + 1

        j += 1
      }
      if (addStr < shortest && tempMap('A') == 0 && tempMap('G') == 0 && tempMap('T') == 0 && tempMap('C') == 0) {
        shortest = addStr
      }
      i += 1
    }
    shortest
  }

  def main(args: Array[String]) {
    val stdin = scala.io.StdIn

    val printWriter = new PrintWriter(System.out)
    // A=-4
    // A=0 c=2 T=1 G=1
    /**
      * val gene = "GAAATAAA"
      * val result = steadyGene(gene)
      * assert(result==5)
      *printWriter.println(result)
      */
    val gene2 = "TGATGCCGTCCCCTCAACTTGAGTGCTCCTAATGCGTTGC"
    //   val gene
    val result2 = steadyGene(gene2)
    printWriter.println(result2)
    //assert(result2 == 1393)
    printWriter.close()
  }
}
